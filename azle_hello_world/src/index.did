type Error = variant { InvalidPayload : text; NotFound : text };
type Message = record {
  id : text;
  attachmentURL : text;
  title : text;
  body : text;
  createdAt : nat64;
  updatedAt : opt nat64;
};
type MessagePayload = record {
  attachmentURL : text;
  title : text;
  body : text;
};
type _AzleResult = variant { Ok : Message; Err : Error };
type _AzleResult_1 = variant { Ok : vec Message; Err : Error };
service : () -> {
  addMessage : (MessagePayload) -> (_AzleResult);
  deleteMessage : (text) -> (_AzleResult);
  getMessage : (text) -> (_AzleResult) query;
  getMessages : () -> (_AzleResult_1) query;
  updateMessage : (text, MessagePayload) -> (_AzleResult);
}